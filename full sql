-- InterIsland Express Vehicle Maintenance System (ISEVMS)
-- Database Creation Script

CREATE DATABASE IF NOT EXISTS isevms;
USE isevms;

-- =============================================
-- USER MANAGEMENT TABLES
-- =============================================

-- User Roles Table
CREATE TABLE user_roles (
    role_id INT PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(50) NOT NULL UNIQUE,
    role_description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Insert default roles
INSERT INTO user_roles (role_name, role_description) VALUES
('System Admin', 'Full system access and management'),
('Fleet Manager', 'Vehicle fleet oversight and planning'),
('Maintenance Manager', 'Maintenance scheduling and oversight'),
('Technician', 'Vehicle maintenance and repairs'),
('Driver', 'Vehicle operation and inspections'),
('Operations Supervisor', 'Daily operations and route management');

-- System Users Table (Base table for all users)
CREATE TABLE users (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(100) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    role_id INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    last_login TIMESTAMP NULL,
    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)
);

-- Insert default admin user
INSERT INTO users (username, email, password_hash, role_id) VALUES
('Greg', 'greg@ise.com', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 1); -- password: 12345Greg

-- Drivers Table
CREATE TABLE drivers (
    driver_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    employee_id VARCHAR(20) NOT NULL UNIQUE,
    full_name VARCHAR(100) NOT NULL,
    date_of_birth DATE NOT NULL,
    address TEXT NOT NULL,
    contact_number VARCHAR(20) NOT NULL,
    driver_license_number VARCHAR(50) NOT NULL UNIQUE,
    license_expiration_date DATE NOT NULL,
    hire_date DATE DEFAULT (CURRENT_DATE),
    status ENUM('Active', 'Inactive', 'Suspended') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- Maintenance Staff Table (Managers and Technicians)
CREATE TABLE maintenance_staff (
    staff_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    employee_id VARCHAR(20) NOT NULL UNIQUE,
    full_name VARCHAR(100) NOT NULL,
    date_of_birth DATE NOT NULL,
    contact_number VARCHAR(20) NOT NULL,
    specialization VARCHAR(100),
    certification_level ENUM('Junior', 'Senior', 'Expert', 'Manager') DEFAULT 'Junior',
    hire_date DATE DEFAULT (CURRENT_DATE),
    status ENUM('Active', 'Inactive', 'On Leave') DEFAULT 'Active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

-- =============================================
-- VEHICLE MANAGEMENT TABLES
-- =============================================

-- Vehicle Categories
CREATE TABLE vehicle_categories (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO vehicle_categories (category_name, description) VALUES
('Bus', 'Passenger buses for inter-island transport'),
('Van', 'Smaller passenger vehicles'),
('Truck', 'Cargo and utility vehicles'),
('Motorcycle', 'Two-wheeled vehicles for quick transport');

-- Vehicles Table
CREATE TABLE vehicles (
    vehicle_id INT PRIMARY KEY AUTO_INCREMENT,
    vehicle_code VARCHAR(20) NOT NULL UNIQUE,
    brand_model VARCHAR(100) NOT NULL,
    year_of_purchase YEAR NOT NULL,
    plate_number VARCHAR(20) NOT NULL UNIQUE,
    category_id INT NOT NULL,
    engine_number VARCHAR(50),
    chassis_number VARCHAR(50),
    fuel_type ENUM('Gasoline', 'Diesel', 'Electric', 'Hybrid') DEFAULT 'Diesel',
    seating_capacity INT,
    purchase_price DECIMAL(12,2),
    current_mileage INT DEFAULT 0,
    vehicle_status ENUM('Active', 'Maintenance', 'Out of Service', 'Retired') DEFAULT 'Active',
    insurance_policy_number VARCHAR(50),
    insurance_expiry DATE,
    registration_expiry DATE,
    gps_device_id VARCHAR(50),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES vehicle_categories(category_id)
);

-- Vehicle Assignment (Driver-Vehicle relationship)
CREATE TABLE vehicle_assignments (
    assignment_id INT PRIMARY KEY AUTO_INCREMENT,
    vehicle_id INT NOT NULL,
    driver_id INT NOT NULL,
    assigned_date DATE NOT NULL,
    unassigned_date DATE NULL,
    is_active BOOLEAN DEFAULT TRUE,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (vehicle_id) REFERENCES vehicles(vehicle_id),
    FOREIGN KEY (driver_id) REFERENCES drivers(driver_id)
);

-- =============================================
-- PARTS AND INVENTORY MANAGEMENT
-- =============================================

-- Parts Categories
CREATE TABLE parts_categories (
    category_id INT PRIMARY KEY AUTO_INCREMENT,
    category_name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO parts_categories (category_name, description) VALUES
('Engine', 'Engine components and parts'),
('Transmission', 'Transmission system parts'),
('Brakes', 'Braking system components'),
('Suspension', 'Suspension and steering parts'),
('Electrical', 'Electrical system components'),
('Body', 'Body and exterior parts'),
('Interior', 'Interior components and accessories'),
('Fluids', 'Oils, coolants, and other fluids'),
('Filters', 'Air, oil, and fuel filters'),
('Tires', 'Tires and wheels');

-- Parts Inventory
CREATE TABLE parts_inventory (
    part_id INT PRIMARY KEY AUTO_INCREMENT,
    part_code VARCHAR(50) NOT NULL UNIQUE,
    part_name VARCHAR(100) NOT NULL,
    category_id INT NOT NULL,
    description TEXT,
    unit_price DECIMAL(10,2) NOT NULL,
    stock_quantity INT DEFAULT 0,
    minimum_stock_level INT DEFAULT 5,
    maximum_stock_level INT DEFAULT 100,
    supplier_name VARCHAR(100),
    supplier_contact VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (category_id) REFERENCES parts_categories(category_id)
);

-- Vehicle Parts (Installed parts tracking)
CREATE TABLE vehicle_parts (
    installation_id INT PRIMARY KEY AUTO_INCREMENT,
    vehicle_id INT NOT NULL,
    part_id INT NOT NULL,
    purchase_date DATE NOT NULL,
    installed_date DATE NOT NULL,
    installation_mileage INT,
    expected_lifespan_months INT,
    expected_lifespan_mileage INT,
    current_condition ENUM('New', 'Good', 'Fair', 'Poor', 'Needs Replacement') DEFAULT 'New',
    replacement_due_date DATE,
    replacement_due_mileage INT,
    cost DECIMAL(10,2) NOT NULL,
    installed_by INT,
    notes TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (vehicle_id) REFERENCES vehicles(vehicle_id),
    FOREIGN KEY (part_id) REFERENCES parts_inventory(part_id),
    FOREIGN KEY (installed_by) REFERENCES maintenance_staff(staff_id)
);

-- =============================================
-- MAINTENANCE MANAGEMENT TABLES
-- =============================================

-- Maintenance Types
CREATE TABLE maintenance_types (
    type_id INT PRIMARY KEY AUTO_INCREMENT,
    type_name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    is_preventive BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO maintenance_types (type_name, description, is_preventive) VALUES
('Preventive Maintenance', 'Scheduled regular maintenance', TRUE),
('Corrective Maintenance', 'Repairs due to breakdowns', FALSE),
('Predictive Maintenance', 'Maintenance based on condition monitoring', TRUE),
('Emergency Repair', 'Urgent repairs for safety', FALSE),
('Inspection', 'Safety and compliance inspections', TRUE);

-- Maintenance Schedules
CREATE TABLE maintenance_schedules (
    schedule_id INT PRIMARY KEY AUTO_INCREMENT,
    vehicle_id INT NOT NULL,
    maintenance_type_id INT NOT NULL,
    schedule_name VARCHAR(100) NOT NULL,
    interval_type ENUM('Mileage', 'Time', 'Both') NOT NULL,
    mileage_interval INT,
    time_interval_days INT,
    last_service_date DATE,
    last_service_mileage INT,
    next_service_date DATE,
    next_service_mileage INT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (vehicle_id) REFERENCES vehicles(vehicle_id),
    FOREIGN KEY (maintenance_type_id) REFERENCES maintenance_types(type_id)
);

-- Work Orders
CREATE TABLE work_orders (
    work_order_id INT PRIMARY KEY AUTO_INCREMENT,
    work_order_number VARCHAR(20) NOT NULL UNIQUE,
    vehicle_id INT NOT NULL,
    maintenance_type_id INT NOT NULL,
    assigned_to INT,
    requested_by INT,
    priority ENUM('Low', 'Medium', 'High', 'Critical') DEFAULT 'Medium',
    status ENUM('Pending', 'In Progress', 'Completed', 'Cancelled') DEFAULT 'Pending',
    description TEXT NOT NULL,
    estimated_cost DECIMAL(10,2),
    actual_cost DECIMAL(10,2),
    scheduled_date DATE,
    started_date DATE,
    completed_date DATE,
    mileage_at_service INT,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (vehicle_id) REFERENCES vehicles(vehicle_id),
    FOREIGN KEY (maintenance_type_id) REFERENCES maintenance_types(type_id),
    FOREIGN KEY (assigned_to) REFERENCES maintenance_staff(staff_id),
    FOREIGN KEY (requested_by) REFERENCES users(user_id)
);

-- Work Order Parts Usage
CREATE TABLE work_order_parts (
    usage_id INT PRIMARY KEY AUTO_INCREMENT,
    work_order_id INT NOT NULL,
    part_id INT NOT NULL,
    quantity_used INT NOT NULL,
    unit_cost DECIMAL(10,2) NOT NULL,
    total_cost DECIMAL(10,2) GENERATED ALWAYS AS (quantity_used * unit_cost) STORED,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (work_order_id) REFERENCES work_orders(work_order_id),
    FOREIGN KEY (part_id) REFERENCES parts_inventory(part_id)
);

-- =============================================
-- VEHICLE OPERATIONS TABLES
-- =============================================

-- Trip Types
CREATE TABLE trip_types (
    trip_type_id INT PRIMARY KEY AUTO_INCREMENT,
    type_name VARCHAR(50) NOT NULL UNIQUE,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO trip_types (type_name, description) VALUES
('Regular Route', 'Scheduled passenger service'),
('Charter', 'Private charter service'),
('Maintenance Run', 'Vehicle maintenance transport'),
('Emergency', 'Emergency transport service');

-- Vehicle Inspections (Pre-trip and Post-trip)
CREATE TABLE vehicle_inspections (
    inspection_id INT PRIMARY KEY AUTO_INCREMENT,
    vehicle_id INT NOT NULL,
    driver_id INT NOT NULL,
    inspection_type ENUM('Pre-Trip', 'Post-Trip') NOT NULL,
    inspection_date DATE NOT NULL,
    inspection_time TIME NOT NULL,
    odometer_reading INT NOT NULL,
    fuel_level DECIMAL(5,2),
    overall_condition ENUM('Excellent', 'Good', 'Fair', 'Poor', 'Unsafe') NOT NULL,
    issues_found TEXT,
    actions_required TEXT,
    inspector_signature VARCHAR(100),
    supervisor_approval INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (vehicle_id) REFERENCES vehicles(vehicle_id),
    FOREIGN KEY (driver_id) REFERENCES drivers(driver_id),
    FOREIGN KEY (supervisor_approval) REFERENCES users(user_id)
);

-- Inspection Checklist Items
CREATE TABLE inspection_items (
    item_id INT PRIMARY KEY AUTO_INCREMENT,
    item_name VARCHAR(100) NOT NULL,
    item_category VARCHAR(50) NOT NULL,
    is_critical BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO inspection_items (item_name, item_category, is_critical) VALUES
('Engine Oil Level', 'Engine', TRUE),
('Coolant Level', 'Engine', TRUE),
('Brake Fluid Level', 'Brakes', TRUE),
('Tire Condition', 'Tires', TRUE),
('Tire Pressure', 'Tires', TRUE),
('Lights (Headlights, Taillights)', 'Electrical', TRUE),
('Turn Signals', 'Electrical', TRUE),
('Windshield Wipers', 'Body', FALSE),
('Mirrors', 'Body', TRUE),
('Seat Belts', 'Interior', TRUE),
('Emergency Equipment', 'Safety', TRUE),
('Horn', 'Electrical', TRUE);

-- Inspection Results
CREATE TABLE inspection_results (
    result_id INT PRIMARY KEY AUTO_INCREMENT,
    inspection_id INT NOT NULL,
    item_id INT NOT NULL,
    status ENUM('OK', 'Needs Attention', 'Failed', 'Not Applicable') NOT NULL,
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (inspection_id) REFERENCES vehicle_inspections(inspection_id),
    FOREIGN KEY (item_id) REFERENCES inspection_items(item_id)
);

-- =============================================
-- ALERTS AND NOTIFICATIONS
-- =============================================

-- System Alerts
CREATE TABLE system_alerts (
    alert_id INT PRIMARY KEY AUTO_INCREMENT,
    alert_type ENUM('Maintenance Due', 'Part Replacement', 'License Expiry', 'Insurance Expiry', 'Low Stock', 'Vehicle Issue') NOT NULL,
    vehicle_id INT,
    driver_id INT,
    part_id INT,
    priority ENUM('Low', 'Medium', 'High', 'Critical') DEFAULT 'Medium',
    title VARCHAR(200) NOT NULL,
    message TEXT NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    is_resolved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    resolved_at TIMESTAMP NULL,
    resolved_by INT,
    FOREIGN KEY (vehicle_id) REFERENCES vehicles(vehicle_id),
    FOREIGN KEY (driver_id) REFERENCES drivers(driver_id),
    FOREIGN KEY (part_id) REFERENCES parts_inventory(part_id),
    FOREIGN KEY (resolved_by) REFERENCES users(user_id)
);

-- =============================================
-- AUDIT AND LOGGING TABLES
-- =============================================

-- System Audit Log
CREATE TABLE audit_log (
    log_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    action_type VARCHAR(50) NOT NULL,
    table_name VARCHAR(50) NOT NULL,
    record_id INT,
    old_values JSON,
    new_values JSON,
    ip_address VARCHAR(45),
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);

-- =============================================
-- INDEXES FOR PERFORMANCE
-- =============================================

-- Vehicle-related indexes
CREATE INDEX idx_vehicles_plate ON vehicles(plate_number);
CREATE INDEX idx_vehicles_status ON vehicles(vehicle_status);
CREATE INDEX idx_vehicle_assignments_active ON vehicle_assignments(is_active);

-- Maintenance-related indexes
CREATE INDEX idx_work_orders_status ON work_orders(status);
CREATE INDEX idx_work_orders_vehicle ON work_orders(vehicle_id);
CREATE INDEX idx_work_orders_date ON work_orders(scheduled_date);

-- Parts-related indexes
CREATE INDEX idx_parts_stock ON parts_inventory(stock_quantity);
CREATE INDEX idx_vehicle_parts_active ON vehicle_parts(is_active);
CREATE INDEX idx_vehicle_parts_condition ON vehicle_parts(current_condition);

-- Inspection-related indexes
CREATE INDEX idx_inspections_date ON vehicle_inspections(inspection_date);
CREATE INDEX idx_inspections_vehicle ON vehicle_inspections(vehicle_id);

-- Alert-related indexes
CREATE INDEX idx_alerts_unread ON system_alerts(is_read);
CREATE INDEX idx_alerts_priority ON system_alerts(priority);
CREATE INDEX idx_alerts_type ON system_alerts(alert_type);

-- =============================================
-- VIEWS FOR COMMON QUERIES
-- =============================================

-- Active Vehicle Summary
CREATE VIEW active_vehicles AS
SELECT 
    v.vehicle_id,
    v.vehicle_code,
    v.brand_model,
    v.plate_number,
    v.vehicle_status,
    v.current_mileage,
    vc.category_name,
    d.full_name as assigned_driver,
    va.assigned_date
FROM vehicles v
LEFT JOIN vehicle_categories vc ON v.category_id = vc.category_id
LEFT JOIN vehicle_assignments va ON v.vehicle_id = va.vehicle_id AND va.is_active = TRUE
LEFT JOIN drivers d ON va.driver_id = d.driver_id
WHERE v.vehicle_status = 'Active';

-- Maintenance Due Summary
CREATE VIEW maintenance_due AS
SELECT 
    v.vehicle_id,
    v.vehicle_code,
    v.brand_model,
    v.plate_number,
    ms.schedule_name,
    ms.next_service_date,
    ms.next_service_mileage,
    v.current_mileage,
    CASE 
        WHEN ms.next_service_date <= CURRENT_DATE THEN 'Overdue'
        WHEN ms.next_service_date <= DATE_ADD(CURRENT_DATE, INTERVAL 7 DAY) THEN 'Due Soon'
        ELSE 'Scheduled'
    END as status
FROM vehicles v
JOIN maintenance_schedules ms ON v.vehicle_id = ms.vehicle_id
WHERE ms.is_active = TRUE
AND (ms.next_service_date <= DATE_ADD(CURRENT_DATE, INTERVAL 30 DAY)
     OR ms.next_service_mileage <= v.current_mileage + 1000);

-- Low Stock Parts
CREATE VIEW low_stock_parts AS
SELECT 
    part_id,
    part_code,
    part_name,
    stock_quantity,
    minimum_stock_level,
    supplier_name,
    supplier_contact
FROM parts_inventory
WHERE stock_quantity <= minimum_stock_level;

COMMIT;